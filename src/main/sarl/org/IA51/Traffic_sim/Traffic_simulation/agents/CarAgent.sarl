package org.IA51.Traffic_sim.Traffic_simulation.agents

/** 
 * 
 */

import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import org.IA51.Traffic_sim.Traffic_simulation.events.CarAccident
import org.IA51.Traffic_sim.Traffic_simulation.events.Perception
import org.arakhne.afc.gis.road.primitive.RoadConnection
import org.arakhne.afc.gis.road.primitive.RoadSegment
import java.util.Collection

/** 
 * @author matthieu
 * 
 */
agent Driver {		
	uses Lifecycle

	on Initialize {
		
	}

	on CarAccident {
		// event changement de couleur
		killMe
	}

	on Perception {
		
	}
	def computePerception (entryPoint : RoadConnection, segment:RoadSegment, distanceFromEntryPoint : double, perceptionDistance : double , percepts : Collection <EnvironnmentObject> , treatedSegments : set<RoadSegment>)
	{
		if(treatedSegments.contains(segment)){
			return
		}
		treatedSegments += segment
		var objs:Iterable<EnvironnementObject>
		if (entryPoint === segment.beginPoint){
			objs = segment.getObjectsFromStart
		}
		else{
			objs = segment.getObjectsFromEnd
		}
		for(obj:objs){
			if (obj.getDistanceTo(entryPoint)>distanceFromEntryPoint){
				percepts += obj
			}
		}
	var otherside = segment.getOverSide(entryPoint)
	for(seg:otherside.segments){
		var d = segment.length - distanceFromEntryPoint
		return computePerception(otherSide,seg, 0,Math::min(0,perceptionDistance-d), percepts, treatedSegments)
	}
}
}
	}