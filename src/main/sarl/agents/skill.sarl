package agents

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Behaviors
import environnement.Influence
import environnement.MotionInfluence
import environnement.KillInfluence

import math.Vector2f
import java.lang.reflect.Array
import io.sarl.lang.core.Address
import io.sarl.util.OpenEventSpace
import java.util.UUID


skill standardMovement implements Movement {

	uses DefaultContextInteractions, Behaviors

	val spaceID : UUID
	val environmentID : UUID
	var physicSpace : OpenEventSpace
	var myAdr : Address

	new (spaceID : UUID, environmentID : UUID) {
		this.environmentID = environmentID
		this.spaceID = spaceID
	}

	def install {
		do {
			this.physicSpace = defaultContext.getSpace(this.spaceID)
			Thread::yield
		} while (this.physicSpace === null)
		this.physicSpace.register(asEventListener)
		this.myAdr = this.physicSpace.getAddress(owner.ID)
	}

	def uninstall() {
		var ^event = new InfluenceEvent(new KillInfluence)
		this.physicSpace.emit(this.myAdr.UUID, ^event)[it.UUID == this.environmentID]
		this.physicSpace = null
	}

	def influenceSteering(linearInfluence : Vector2f = null, angularInfluence : float = 0f,
		otherInfluences : Influence*) {
		var mi : MotionInfluence
		if (linearInfluence === null) {
			mi = new MotionInfluence(angularInfluence)
		} else {
			mi = new MotionInfluence(linearInfluence, angularInfluence)
		}
		emitInfluences(mi, otherInfluences)
	}

	def emitInfluences(motionInfluence : MotionInfluence, otherInfluences : Influence*) {
		var influences : Influence[]
		if (otherInfluences.isEmpty) {
			influences = Array::newInstance(typeof(Influence), 1) as Influence[]
			influences.set(0, motionInfluence)
		} else {
			influences = Array::newInstance(typeof(Influence), otherInfluences.length + 1) as Influence[]
			influences.set(0, motionInfluence)
			System::arraycopy(otherInfluences, 0, influences, 1, otherInfluences.length)
		}
		var ^event = new InfluenceEvent(influences)
		this.physicSpace.emit(this.myAdr.UUID, ^event)[it.UUID == this.environmentID]
	}
	
}